/*
* SPL; AS3 Spelling library for Flash and the Flex SDK. 
* 
* Copyright (c) 2013 gskinner.com, inc.
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
package com.gskinner.spelling {
	
	import com.gskinner.spelling.ui.AbstractSpellingUIPlugin;
	
	import flash.events.Event;
	
	import mx.core.UIComponent;
	
	/**
	 * The SPLTagFlex provides an easy way to attach a SpellingHighlighter to a Text Component
	 * using MXML. For direct instatiation in ActionScript, please use the SpellingHighlighter.as.
	 *
	 * @see com.gskinner.spelling.SpellingHighlighter
	 */
	 [IconFile("componentIcon.png")]
	public class SPLTagFlex extends UIComponent {
		
		/** @private */
		protected var _spellingHighlighter:SpellingHighlighter;
		
		/** @private */
		protected var _targetInstanceName:String;
		
		/** @private */
		protected var _target:Object;
		
		/** @private */
		protected var _enabled:Boolean = true;
		
		/** @private */
		protected var _updateOnValueCommit:Boolean = true;
		
		/** @private */
		protected var _menu:AbstractSpellingUIPlugin;
		
		/** @private */
		public function SPLTagFlex() { 
			_spellingHighlighter = new SpellingHighlighter();
			addEventListener(Event.ADDED_TO_STAGE, handleStage, false, 0, true);
			visible = false;
		}
		
		/** @private */
		[Inspectable()]
		public function set targetInstanceName(value:String):void {
			_targetInstanceName = value;
			invalidateProperties();
		}
		
		/** @private */
		[Inspectable()]
		public function get target():Object {
			return _spellingHighlighter.target;
		}
		/** @private */
		public function set target(value:Object):void {
			_target = value;
			invalidateProperties();
		}
		
		/** @private */		
		[Inspectable(defaultValue="true", type="Boolean")]
		public function get updateOnValueCommit():Boolean {
			return _updateOnValueCommit;
		}
		/** @private */
		public function set updateOnValueCommit(p_value:Boolean):void {
			_updateOnValueCommit = p_value;
			invalidateProperties();
		}
		
		/** @copy com.gskinner.spelling.SpellingHighlighter#enabled */
		[Inspectable(defaultValue="true", type="Boolean")]
		override public function get enabled():Boolean {
			return _spellingHighlighter.enabled;
		}
		/** @private */
		override public function set enabled(value:Boolean):void {
			_enabled = value;
			invalidateProperties();
		}	
		
		/**
		 * Set a custom ContextMenu to display spelling suggestions.
		 * The deafult will be ContextMenuPlugin
		 * 
		 * @see com.gskinner.spelling.ui.ContextMenuPlugin;
		 * @see com.gskinner.spelling.ui.AbstractSpellingUIPlugin;
		 * 
		 */
		[Inspectable]
		public function set menu(value:AbstractSpellingUIPlugin):void {
			_menu = value;
			invalidateProperties();
		}
		
		/** @private */
		public function get menu():AbstractSpellingUIPlugin {
			return _menu;
		}
		
		/**
		 * Returns the SpellingHighlighter instance that was generated by this component. Use this
		 * to change properties or subscribe to events of the SpellingHighlighter.
		 * 
		 * @see com.gskinner.spelling.SpellingHighlighter
		 */
		public function get spellingHighlighter():SpellingHighlighter {
			return _spellingHighlighter;
		}
		
		/** @private */
		protected function handleStage(event:Event):void {
			removeEventListener(Event.ADDED_TO_STAGE, handleStage);
			updateValues();
		}
		
		/** @private */
		protected function updateValues():void {
			if (!stage) { return; }
			
			_spellingHighlighter.updateOnValueCommit = _updateOnValueCommit;
			
			_spellingHighlighter.enabled = _enabled;
			
			if (_targetInstanceName != null) {
				_spellingHighlighter.target = parent[_targetInstanceName];
			} else {
				_spellingHighlighter.target = _target;
			}
			
			_spellingHighlighter.menu = _menu;
		}
		
		/** @private */
		override protected function commitProperties():void {
			updateValues();
			
			super.commitProperties();
		}
		
	}
	
}